<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="pt-BR">
  <compounddef id="Sdre_8cpp" kind="file" language="C++">
    <compoundname>Sdre.cpp</compoundname>
    <includes refid="Sdre_8h" local="yes">Sdre.h</includes>
    <incdepgraph>
      <node id="1">
        <label>lib/SDRE/Sdre.cpp</label>
        <link refid="Sdre_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Sdre.h</label>
        <link refid="Sdre_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>eigen3/Eigen/Dense</label>
      </node>
      <node id="3">
        <label>../RICCATI/Riccati.h</label>
        <link refid="Riccati_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Arduino.h</label>
      </node>
      <node id="7">
        <label>iostream</label>
      </node>
      <node id="5">
        <label>GRUPO_QUAT.h</label>
        <link refid="GRUPO__QUAT_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Sdre_8h" kindref="compound">Sdre.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="classSdre_1acfa822102ba368dde55594e9f041f9df" refkind="member"><highlight class="normal"><ref refid="classSdre_1acfa822102ba368dde55594e9f041f9df" kindref="member">Sdre::Sdre</ref>(Eigen::MatrixXf<sp/>&amp;A,<sp/>Eigen::MatrixXf<sp/>&amp;B,<sp/>Eigen::MatrixXf<sp/>&amp;_Q,</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::MatrixXf<sp/>&amp;_R)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>A.cols();</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>B.cols();</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><ref refid="classSdre_1aad912686f9a487dce4ea7e4875efd563" kindref="member">L</ref><sp/>=<sp/>Eigen::MatrixXf::Identity(r,<sp/>n);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><ref refid="classSdre_1a6b63e08a6c981385373f45ee9ac1be73" kindref="member">Q</ref><sp/>=<sp/>&amp;_Q;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><ref refid="classSdre_1a17464293d3a2f24ea0c55da3fcb0e864" kindref="member">R</ref><sp/>=<sp/>&amp;_R;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>instancia<sp/>o<sp/>Solver<sp/>de<sp/>Riccati<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><ref refid="classSdre_1ac29f58dd81643087f49ccbed42b794df" kindref="member">ricObj</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classRiccati" kindref="compound">Riccati</ref>(A,<sp/>B,<sp/>*<ref refid="classSdre_1a6b63e08a6c981385373f45ee9ac1be73" kindref="member">Q</ref>,<sp/>*<ref refid="classSdre_1a17464293d3a2f24ea0c55da3fcb0e864" kindref="member">R</ref>);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Salvas<sp/>os<sp/>enderços<sp/>das<sp/>matrizes<sp/>de<sp/>estado<sp/>e<sp/>controle*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><ref refid="classSdre_1ae868a877b9ade90516f90ff46a673568" kindref="member">phi</ref><sp/>=<sp/>&amp;A;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><ref refid="classSdre_1aa8e71f3403ee322804ac1e7a6d19b00e" kindref="member">gamma</ref><sp/>=<sp/>&amp;B;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><ref refid="classSdre_1a348491f949fa0faae3fb86b7dbabd33d" kindref="member">E</ref><sp/>=<sp/>B<sp/>*<sp/>_R.inverse()<sp/>*<sp/>B.transpose();</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><ref refid="classSdre_1ad244c5cc1e70a1b08e8e4d5655993d8b" kindref="member">G</ref><sp/>=<sp/>Eigen::MatrixXf::Identity(n,<sp/>n);</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25" refid="classSdre_1a887dbd01f9f6846839114a4d5ff64102" refkind="member"><highlight class="normal"><ref refid="classSdre_1a887dbd01f9f6846839114a4d5ff64102" kindref="member">Sdre::~Sdre</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="30" refid="classSdre_1af2f380ec3d018b60686e304ca7026846" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classSdre_1af2f380ec3d018b60686e304ca7026846" kindref="member">Sdre::updateControl</ref>()<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifica<sp/>o<sp/>se<sp/>o<sp/>algoritmo<sp/>converge<sp/>com<sp/>o<sp/>numero<sp/>de<sp/>iterações<sp/>e<sp/>tolerância</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>desejado.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*ricObj).dareInteration())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Obtem<sp/>a<sp/>matriz<sp/>de<sp/>Riccati.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>atualiza<sp/>a<sp/>matriz<sp/>de<sp/>ganho<sp/>de<sp/>Kalman</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSdre_1aad912686f9a487dce4ea7e4875efd563" kindref="member">L</ref><sp/>=<sp/>(*ricObj).Ls<sp/>*<sp/>(*ricObj).K<sp/>*<sp/>(*phi);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSdre_1ad244c5cc1e70a1b08e8e4d5655993d8b" kindref="member">G</ref><sp/>=<sp/>((*ricObj).I<sp/>-</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*phi).transpose()<sp/>*</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((*ricObj).I<sp/>-</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*ricObj).K<sp/>*<sp/>((*ricObj).I<sp/>+<sp/><ref refid="classSdre_1a348491f949fa0faae3fb86b7dbabd33d" kindref="member">E</ref><sp/>*<sp/>(*ricObj).K).inverse()<sp/>*<sp/><ref refid="classSdre_1a348491f949fa0faae3fb86b7dbabd33d" kindref="member">E</ref>))</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.inverse();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retorna<sp/>falso<sp/>mantendo<sp/>o<sp/>ultimo<sp/>ganho<sp/>de<sp/>Riccati.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51" refid="classSdre_1a4848cfbce14035e6b3733a628de9e24f" refkind="member"><highlight class="normal">Eigen::MatrixXcf<sp/><ref refid="classSdre_1a4848cfbce14035e6b3733a628de9e24f" kindref="member">Sdre::closeLoopEig</ref>()<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Eigen::MatrixXf<sp/>closeLoop<sp/>=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*phi<sp/>-<sp/>*gamma<sp/>*<sp/>(*R).inverse()<sp/>*<sp/>(*gamma).transpose()<sp/>*<sp/>(*ricObj).K;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>Eigen::MatrixXf<sp/>closeLoop<sp/>=<sp/>*<ref refid="classSdre_1ae868a877b9ade90516f90ff46a673568" kindref="member">phi</ref><sp/>-<sp/>*<ref refid="classSdre_1aa8e71f3403ee322804ac1e7a6d19b00e" kindref="member">gamma</ref><sp/>*<sp/><ref refid="classSdre_1aad912686f9a487dce4ea7e4875efd563" kindref="member">L</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>Eigen::EigenSolver&lt;Eigen::MatrixXf&gt;<sp/>Eigs(closeLoop);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigs.eigenvalues();</highlight></codeline>
<codeline lineno="57"><highlight class="normal">};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">;</highlight></codeline>
    </programlisting>
    <location file="lib/SDRE/Sdre.cpp"/>
  </compounddef>
</doxygen>
