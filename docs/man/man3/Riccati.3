.TH "Riccati" 3 "Sexta, 17 de Setembro de 2021" "Quadrirrotor" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Riccati
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Riccati\&.h>\fP
.SS "Membros Públicos"

.in +1c
.ti -1c
.RI "\fBRiccati\fP (Eigen::MatrixXf &_A, Eigen::MatrixXf &_B, Eigen::MatrixXf &_Q, Eigen::MatrixXf &_R)"
.br
.ti -1c
.RI "bool \fBdareInteration\fP (const float &tolerance=1\&.0E\-5, const uint16_t iter_max=100)"
.br
.in -1c
.SS "Campos de Dados"

.in +1c
.ti -1c
.RI "Eigen::MatrixXf \fBK\fP"
.br
.ti -1c
.RI "Eigen::MatrixXf \fBK_new\fP"
.br
.ti -1c
.RI "Eigen::MatrixXf * \fBphi\fP"
.br
.ti -1c
.RI "Eigen::MatrixXf * \fBgamma\fP"
.br
.ti -1c
.RI "Eigen::MatrixXf * \fBR\fP"
.br
.ti -1c
.RI "Eigen::MatrixXf * \fBQ\fP"
.br
.ti -1c
.RI "Eigen::MatrixXf \fBI\fP"
.br
.ti -1c
.RI "Eigen::MatrixXf \fBLs\fP"
.br
.ti -1c
.RI "int \fBnum_iterations\fP = 0"
.br
.in -1c
.SH "Descrição detalhada"
.PP 

.PP
\fBAutor\fP
.RS 4
: roney 
.RE
.PP
\fBData\fP
.RS 4
: 2021-08-02T14:12:53-03:00 email: roneyddasilva@gmail.com @File: \fBRiccati\&.h\fP Last modified by: roney Last modified time: 2021-08-02T14:12:53-03:00 
.RE
.PP

.PP
Definição na linha 24 do arquivo Riccati\&.h\&.
.SH "Construtores e Destrutores"
.PP 
.SS "Riccati::Riccati (Eigen::MatrixXf & _A, Eigen::MatrixXf & _B, Eigen::MatrixXf & _Q, Eigen::MatrixXf & _R)"

.PP
\fBAutor\fP
.RS 4
: roney 
.RE
.PP
\fBData\fP
.RS 4
: 2021-08-02T14:13:06-03:00 email: roneyddasilva@gmail.com @File: \fBRiccati\&.cpp\fP Last modified by: roney Last modified time: 2021-08-02T14:13:06-03:00 
.RE
.PP

.PP
Definição na linha 11 do arquivo Riccati\&.cpp\&.
.PP
.nf
12                                     {
13   phi = &_A;
14   int n = _A\&.cols();
15   int r = _B\&.cols();
16   gamma = &_B;
17   R = &_R;
18   Q = &_Q;
19   Ls = Eigen::MatrixXf::Identity(r, r);
20   K = *Q;
21   K_new = K;
22   I = Eigen::MatrixXf::Identity(n, n);
23 }
.fi
.PP
Referencias gamma, I, K, K_new, Ls, phi, Q e R\&.
.SH "Funções membros"
.PP 
.SS "bool Riccati::dareInteration (const float & tolerance = \fC1\&.0E\-5\fP, const uint16_t iter_max = \fC100\fP)"
Função de cálculo da solução de Ricccati discreta\&. 
.PP
\fBParâmetros\fP
.RS 4
\fItolerance\fP máxima erro permitido\&. 
.br
\fIiter_max\fP Número máximo de iterações 
.RE
.PP
\fBRetorna\fP
.RS 4
true se ok, false se numéro máximo de iterações for atingido\&. 
.RE
.PP
\fBAtividades futuras\fP
.RS 4
Testar a influencia em armazenar a matrix A\&.transpose()\&. 
.RE
.PP
Diferença entre \fBK_new\fP e \fBK\fP
.PP
Definição na linha 32 do arquivo Riccati\&.cpp\&.
.PP
.nf
33                                                       { //
35   float diff = 0;
36   for (num_iterations = 1; num_iterations < iter_max; num_iterations++) {
37 
38     Ls = (*R + (*gamma)\&.transpose() * K * (*gamma))\&.inverse() *
39          (*gamma)\&.transpose();
40     K_new = (*phi)\&.transpose() * K * (I - (*gamma) * Ls * K) * (*phi);
41     K_new\&.noalias() += *Q;
42     // avalia o erro para parar as iterações\&.
43     // diff = (K_new - K)\&.cwiseAbs()\&.maxCoeff();
44     Eigen::MatrixXf erro = K_new - K;
45     diff = (erro)\&.norm() / K\&.norm();
46     K = K_new;
47     if (diff < tolerance) {
48 
49 #if 0 // defined __GNUC__ && defined DEBUG
50       printf("Sucess! Numero de iteracoes: %d\n", i);
51       // #include "\&.\&./\&.\&./\&.\&./quadricopterFinal/lib/GRUPO_QUAT/GRUPO_QUAT\&.h"
52 #endif
53       return true;
54     }
55   }
56 #if defined __GNUC__ && defined DEBUG
57   printf("Falha\&. Erro %f\n", diff);
58   // PRINT_MAT(K);
59   // K = *Q;
60 #endif
61   return false;
62 };
.fi
.PP
Referencias I, K, K_new, Ls, num_iterations, phi, Q e R\&.
.SH "Campos"
.PP 
.SS "Eigen::MatrixXf* Riccati::gamma"
Ponteiro da matriz de controle\&. 
.PP
Definição na linha 33 do arquivo Riccati\&.h\&.
.PP
Referenciado(a) por Riccati()\&.
.SS "Eigen::MatrixXf Riccati::I"

.PP
Definição na linha 38 do arquivo Riccati\&.h\&.
.PP
Referenciado(a) por dareInteration() e Riccati()\&.
.SS "Eigen::MatrixXf Riccati::K"
Matriz de \fBRiccati\fP 
.PP
Definição na linha 29 do arquivo Riccati\&.h\&.
.PP
Referenciado(a) por dareInteration() e Riccati()\&.
.SS "Eigen::MatrixXf Riccati::K_new"

.PP
Definição na linha 29 do arquivo Riccati\&.h\&.
.PP
Referenciado(a) por dareInteration() e Riccati()\&.
.SS "Eigen::MatrixXf Riccati::Ls"
Matriz La = (B'PB+R)^-1 * B' 
.PP
Definição na linha 40 do arquivo Riccati\&.h\&.
.PP
Referenciado(a) por Controle::Controle(), dareInteration() e Riccati()\&.
.SS "int Riccati::num_iterations = 0"

.PP
Definição na linha 41 do arquivo Riccati\&.h\&.
.PP
Referenciado(a) por dareInteration()\&.
.SS "Eigen::MatrixXf* Riccati::phi"
Ponteiro da matriz de estado\&. 
.PP
Definição na linha 31 do arquivo Riccati\&.h\&.
.PP
Referenciado(a) por dareInteration() e Riccati()\&.
.SS "Eigen::MatrixXf* Riccati::Q"
Ponteiro da matriz de ponderação dos estados\&. 
.PP
Definição na linha 37 do arquivo Riccati\&.h\&.
.PP
Referenciado(a) por dareInteration() e Riccati()\&.
.SS "Eigen::MatrixXf* Riccati::R"
Ponteiro da matriz de ponderação do controle 
.PP
Definição na linha 35 do arquivo Riccati\&.h\&.
.PP
Referenciado(a) por dareInteration() e Riccati()\&.

.SH "Autor"
.PP 
Gerado automaticamente por Doxygen para Quadrirrotor a partir do código-fonte\&.
