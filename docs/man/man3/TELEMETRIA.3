.TH "TELEMETRIA" 3 "Segunda, 25 de Outubro de 2021" "Quadrirrotor" \" -*- nroff -*-
.ad l
.nh
.SH NAME
TELEMETRIA
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <TELEMETRIA\&.h>\fP
.SS "Estruturas de Dados"

.in +1c
.ti -1c
.RI "struct \fBIMU_DATA\fP"
.br
.RI "Estrutura de mensagem\&. "
.ti -1c
.RI "struct \fBMENSAGEM\fP"
.br
.RI "Mensagem de texto para envio\&. "
.in -1c
.SS "Membros Públicos"

.in +1c
.ti -1c
.RI "\fBTELEMETRIA\fP ()"
.br
.ti -1c
.RI "void \fBbegin\fP ()"
.br
.ti -1c
.RI "void \fBenvia\fP ()"
.br
.RI "Envia vetor Eigen de float\&. "
.ti -1c
.RI "void \fBenviaTunningGains\fP ()"
.br
.ti -1c
.RI "void \fBenviaMensagem\fP (char *aviso)"
.br
.ti -1c
.RI "void \fBpisca\fP (uint8_t porta)"
.br
.ti -1c
.RI "struct \fB__attribute__\fP ((packed)) \fBcontrole\fP"
.br
.in -1c
.SS "Campos de Dados"

.in +1c
.ti -1c
.RI "uint8_t \fB_broadcast\fP [6] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}"
.br
.ti -1c
.RI "struct \fBTELEMETRIA::IMU_DATA\fP \fBimu\fP"
.br
.ti -1c
.RI "float \fBgainsTunning\fP [3]"
.br
.ti -1c
.RI "\fBcontrole\fP"
.br
.ti -1c
.RI "uint8_t \fB_quantDados\fP"
.br
.in -1c
.SS "Atributos Estáticos Públicos"

.in +1c
.ti -1c
.RI "static uint8_t \fBcomAceito\fP"
.br
.in -1c
.SS "Membros Privados Estáticos"

.in +1c
.ti -1c
.RI "static void \fBOnDataRecv\fP (const uint8_t *\fB_broadcast\fP, const uint8_t *\fBdata\fP, int data_len)"
.br
.in -1c
.SH "Descrição detalhada"
.PP 
Definição na linha 24 do arquivo TELEMETRIA\&.h\&.
.SH "Construtores e Destrutores"
.PP 
.SS "TELEMETRIA::TELEMETRIA ()"
Construtor 
.PP
Definição na linha 16 do arquivo TELEMETRIA\&.cpp\&.
.PP
.nf
16 { begin(); }
.fi
.PP
Referencias begin()\&.
.PP
Referenciado(a) por OnDataRecv()\&.
.SH "Funções membros"
.PP 
.SS "struct TELEMETRIA::__attribute__ ((packed))\fC [inline]\fP"

.PP
Definição na linha 48 do arquivo TELEMETRIA\&.h\&.
.PP
.nf
57                                                   {
58     uint8_t dados;
59   } controle;
.fi
.SS "void TELEMETRIA::begin ()"
Inicialização da telemetria 
.PP
Definição na linha 20 do arquivo TELEMETRIA\&.cpp\&.
.PP
.nf
20                        {
21   // disconeta WIfi para evitar instabilidades
22   WiFi\&.disconnect();
23   // inicializa wifi em modo station
24   WiFi\&.mode(WIFI_STA);
25   // tenta estabelecer coneccao
26   while (esp_now_init() != ESP_OK) {
27     ESP\&.restart();
28   };
29   Serial\&.println("ESP Inicializado");
30   // Criamos uma variável que irá guardar as informações do slave
31   esp_now_peer_info_t slave;
32   slave\&.channel = 1; // Informamos o canal
33   slave\&.encrypt = 0; // 0 para não usar criptografia ou 1 para usar
34   // Copia o endereço do array para a estrutura
35   memcpy(slave\&.peer_addr, _broadcast, sizeof(_broadcast));
36 
37   esp_now_add_peer(&slave); // Adiciona o slave
38   esp_now_register_recv_cb(OnDataRecv);
39 }
.fi
.PP
Referencias _broadcast e OnDataRecv()\&.
.PP
Referenciado(a) por setup() e TELEMETRIA()\&.
.SS "void TELEMETRIA::envia ()"

.PP
Envia vetor Eigen de float\&. 
.PP
\fBParâmetros\fP
.RS 4
\fIquant\fP Dimensão maxima de 20 
.br
\fI_a\fP Vetor com dados\&. 
.RE
.PP

.PP
Definição na linha 46 do arquivo TELEMETRIA\&.cpp\&.
.PP
.nf
46                        {
47 // Array que irá armazenar os valores lidos
48 // IMU_DATA imu;
49 // float temp[_a\&.size()];
50 // imu\&.quantidadeValida = quant;
51 #ifdef DEBUG_BY_SERIAL
52   for (uint16_t i = 0; i < imu\&.dadosEigen\&.size(); i++) {
53     printf("%f  ", imu\&.dados[i]);
54   }
55   printf("\n");
56 #endif
57 
58   uint8_t bs[DATA_SIZE * 4];
59 
60   memcpy(&bs, &imu, sizeof(bs));
61   esp_now_send(_broadcast, bs, sizeof(bs));
62 }
.fi
.PP
Referencias _broadcast, TELEMETRIA::IMU_DATA::dados, TELEMETRIA::IMU_DATA::dadosEigen, DATA_SIZE e imu\&.
.PP
Referenciado(a) por xTaskLoopFilter()\&.
.SS "void TELEMETRIA::enviaMensagem (char * aviso)"

.PP
Definição na linha 69 do arquivo TELEMETRIA\&.cpp\&.
.PP
.nf
69                                           {
70   MENSAGEM msg;
71 
72   strcpy(msg\&.info, aviso);
73 #ifdef DEBUG_BY_SERIAL
74   printf(msg\&.info);
75   printf("\n");
76 #endif
77   // Serial\&.println(msg\&.info);
78   uint8_t bs[sizeof(msg)];
79   memcpy(&bs, &msg, sizeof(msg));
80   esp_now_send(_broadcast, bs, sizeof(bs));
81 }
.fi
.PP
Referencias _broadcast e TELEMETRIA::MENSAGEM::info\&.
.PP
Referenciado(a) por emergencyMethods(), setup(), xTaskContol(), xTaskLoopFilter() e xTaskSetupFiltro()\&.
.SS "void TELEMETRIA::enviaTunningGains ()"

.PP
Definição na linha 63 do arquivo TELEMETRIA\&.cpp\&.
.PP
.nf
63                                    {
64 
65   uint8_t bs[sizeof(gainsTunning)];
66   memcpy(&bs, &gainsTunning, sizeof(gainsTunning));
67   esp_now_send(_broadcast, bs, sizeof(bs));
68 }
.fi
.PP
Referencias _broadcast e gainsTunning\&.
.PP
Referenciado(a) por xTaskContol()\&.
.SS "void TELEMETRIA::OnDataRecv (const uint8_t * _broadcast, const uint8_t * data, int data_len)\fC [static]\fP, \fC [private]\fP"

.PP
Definição na linha 83 do arquivo TELEMETRIA\&.cpp\&.
.PP
.nf
84                                           {
85   TELEMETRIA TELEMETRIA;
86   // Para cada pino
87   controle ctrl;
88   memcpy(&ctrl, data, sizeof(controle));
89   // atualizacontrole(ctrl\&.dados);
90   TELEMETRIA::comAceito = ctrl\&.dados;
91 }
.fi
.PP
Referencias comAceito, controle, data e TELEMETRIA()\&.
.PP
Referenciado(a) por begin()\&.
.SS "void TELEMETRIA::pisca (uint8_t porta)"

.PP
Definição na linha 93 do arquivo TELEMETRIA\&.cpp\&.
.PP
.nf
93                                     {
94   digitalWrite(porta, HIGH);
95   delay(1000);
96   digitalWrite(porta, LOW);
97   delay(1000);
98 }
.fi
.SH "Campos"
.PP 
.SS "uint8_t TELEMETRIA::_broadcast[6] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}"

.PP
Definição na linha 32 do arquivo TELEMETRIA\&.h\&.
.PP
Referenciado(a) por begin(), envia(), enviaMensagem() e enviaTunningGains()\&.
.SS "uint8_t TELEMETRIA::_quantDados"

.PP
Definição na linha 62 do arquivo TELEMETRIA\&.h\&.
.SS "uint8_t TELEMETRIA::comAceito\fC [static]\fP"

.PP
Definição na linha 61 do arquivo TELEMETRIA\&.h\&.
.PP
Referenciado(a) por OnDataRecv()\&.
.SS "TELEMETRIA::controle"

.PP
Definição na linha 59 do arquivo TELEMETRIA\&.h\&.
.PP
Referenciado(a) por OnDataRecv()\&.
.SS "float TELEMETRIA::gainsTunning[3]"

.PP
Definição na linha 48 do arquivo TELEMETRIA\&.h\&.
.PP
Referenciado(a) por enviaTunningGains() e xTaskContol()\&.
.SS "struct \fBTELEMETRIA::IMU_DATA\fP TELEMETRIA::imu"

.PP
Referenciado(a) por envia() e xTaskLoopFilter()\&.

.SH "Autor"
.PP 
Gerado automaticamente por Doxygen para Quadrirrotor a partir do código-fonte\&.
